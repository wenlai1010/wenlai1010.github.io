<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>有限的时间,无限的知识</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-08T04:55:14.785Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Wen Lai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>http</title>
    <link href="http://yoursite.com/2018/01/08/http/"/>
    <id>http://yoursite.com/2018/01/08/http/</id>
    <published>2018-01-08T03:17:55.712Z</published>
    <updated>2018-01-08T04:55:14.785Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>http( HyperText Transfer Protocol, 超文本传输协议) 最早就是计算机与计算机之间沟通的一种协议，这种协议限制了通讯内容的格式以及各项内容的含义。随着时代的发展，技术的变迁，这种协议现在广泛的应用在各种领域，也不仅仅局限于计算机与计算机之间，手机、电脑等各种智能设备很多时候都在使用这种协议通讯，所以一般现在称<strong>HTTP为端与端之间的通讯协议</strong></p><h4 id="应用软件架构一般分为两类"><a href="#应用软件架构一般分为两类" class="headerlink" title="应用软件架构一般分为两类:"></a>应用软件架构一般分为两类:</h4><ul><li>B/S架构 : Browser(浏览器) ←→ Server (服务器)，这种软件都是通过浏览器访问一个网站使用，服务器提供数据存储等服务。</li><li>C/S架构 : Client(客户端) ←→ Server (服务器)，这种软件通过安装一个软件到电脑，然后使用，服务器提供数据存储等服务。</li></ul><h4 id="约定的内容"><a href="#约定的内容" class="headerlink" title="约定的内容"></a>约定的内容</h4><ul><li>请求/响应报文格式</li><li>请求方法</li><li>响应状态</li><li>预设的请求/响应头</li></ul><h4 id="约定的形式"><a href="#约定的形式" class="headerlink" title="约定的形式"></a>约定的形式</h4><ul><li>客户端通过随机端口与服务端某个固定端口(一般为80)  <strong>建立连接</strong></li><li>客户端通过这个连接<strong>发送请求</strong>到服务器</li><li>服务端监听端口得到的客户端发送过来的请求</li><li>服务端通过连接响应给客户端状态和内容</li></ul><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><h4 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h4><ol><li><p>请求行：GET / index.html  HTTP/1.1</p></li><li><p>请求方式+空格+请求路径+空格+HTTP协议版本</p></li><li><p>请求头：客户端想要告诉服务端的一些额外信息，以下为常见的请求头 ↓</p><p>| 键               | 值                           |<br>| :————– | ————————— |<br>| Host            | 请求的主机                       |<br>| Cache-Control   | 控制缓存（例如：max-age=60 缓存 60 秒） |<br>| Accept          | 客户端想要接收的文档类型，逗号分隔           |<br>| User-Agent      | 标识什么客户端帮你发送的这次请求            |<br>| Referer         | 这次请求的来源                     |<br>| Accept-Encoding | 可以接收的压缩编码                   |</p></li><li><p>请求体：这次请求客户端想要发送给服务端的数据正文，一般在GET请求请求时很少用到，应为GET请求主观上都是去 <strong>拿东西</strong>。</p></li></ol><h4 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h4><ol><li><p>状态行：HTTP/1.1 200 ok</p></li><li><p>HTTP协议版本 + 空格 + 状态码 + 空格 + 状态描述</p></li><li><p>响应头：服务端想要告诉客户端的一些额外信息，常见的有 ↓ </p><p>| 键              | 值       |<br>| ————– | ——- |<br>| Date           | 响应时间    |<br>| Server         | 服务器信息   |<br>| Content-Type   | 响应的内容类型 |<br>| Content-Length | 响应的内容大小 |</p></li><li><p>响应体：这次请求服务端想要返回给客户端的数据正文，一般返回的都是HTML，也可以返回javascript和css</p></li></ol><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><ul><li><p>设置响应文件类型</p><ul><li>header（‘Content-Type ：text/css’）;</li></ul></li><li><p>重定向（跳转到其它网页）</p><ul><li>header(‘Location:<a href="http://wenlai1010.github.io’" target="_blank" rel="noopener">http://wenlai1010.github.io’</a>);</li></ul></li><li><p>下载文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//让文件下载</span><br><span class="line">header('Content-Type: application/octet-stream');</span><br><span class="line">//设置默认下载文件名</span><br><span class="line">header('Content-Disposition: attachment;filename=demo.txt');</span><br></pre></td></tr></table></figure></li></ul><h4 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h4><ul><li><p>GET:    拿，获取</p></li><li><p>POST:     发，给</p><ul><li><p>对比GET与POST</p><p>|          | GET                                      | POST                                     |<br>| :——- | —————————————- | —————————————- |<br>| 后退按钮/刷新  | 无害                                       | 数据会被重新提交（浏览器应该告知用户数据会被重新提交）              |<br>| 书签       | 可收藏为书签                                   | 不可收藏为书签                                  |<br>| 缓存       | 能被缓存                                     | 不能缓存                                     |<br>| 编码类型     | application/x-www-form-urlencoded        | application/x-www-form-urlencoded或multipart/form-data.为二进制数据使用多重编码 |<br>| 历史       | 参数保留在浏览器历史中                              | 参数不会保存在浏览器历史中                            |<br>| 对数据长度的限制 | 有，当发送数据时，GET方法想url添加数据，URL的最大长度是2048个字符。 | 无限制                                      |<br>| 对数据类型的限制 | 只允许ASCII字符                               | 没有限制也允许二进制数据                             |<br>| 安全性      | 与post相比，GET的安全性较差，因为所发送的数据是URL的一部分。在发送密码或其他敏感信息是绝不要使用GET | POST比GET更安全，因为参数不会被保存在浏览器历史或web服务器日志中。   |<br>| 可见性      | 数据在URL中对所有人都是可见的                         | 数据不会显示在URL中                              |</p></li></ul></li></ul><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><p>状态码由三为数字组成，第一个数字定义了响应的类别</p><ul><li>1**：提示信息—-表示请求已接收，继续处理。</li><li>2**：成功—-表示请求已成功接受。</li><li>3**：重定向—-要完成请求必须进行更近一步的操作。</li><li>4**：客户端错误—-请求有语法错误或请求无法实现。</li><li>5**：服务器错误—-服务器未能实现合法的请求。</li></ul><p>常见的状态码描述如下：</p><ul><li>200 OK : 客户端请求成功。</li><li>400 Bad Request：客户端请求有语法错误，不能被服务器所理解。</li><li>401 Unauthorized：请求未经授权，这个状态码必须和www-Authenticate 报头域一起使用。</li><li>403 Forbidden：服务器收到请求，但是拒绝提供服务。</li><li>404 Not Found：请求的资源不存在</li><li>500 internal Server Error 服务器发送不可预期的错误。</li><li>503 Server Unavailable：服务器当前不能处理客户端的请求，一段时间后可能恢复正常。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;h4 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h4&gt;&lt;p&gt;htt
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue.js 02</title>
    <link href="http://yoursite.com/2017/11/29/Vue.js-02/"/>
    <id>http://yoursite.com/2017/11/29/Vue.js-02/</id>
    <published>2017-11-29T11:58:28.271Z</published>
    <updated>2017-11-29T12:03:02.543Z</updated>
    
    <content type="html"><![CDATA[<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>Vue 基础<ul><li>转变 DOM 操作思想</li><li>MVVM<ul><li>Model</li><li>View</li><li>ViewModel</li><li>哲学：数据驱动视图</li></ul></li></ul></li><li>不难、最简单的、掌握工具的使用方法就可以了</li><li>Vue 框架<ul><li>Vue Router</li><li>Vuex</li><li>webpack<ul><li>可以像写 node 一样写浏览器中的 JavaScript</li></ul></li><li>Vue CLI</li><li>Vue 全家桶</li><li>一整套的集成解决方案</li></ul></li></ul><ul><li>EcmaScript 6</li></ul><ul><li>Vue 基本语法复习</li><li>EcmaScript 6<ul><li>let<ul><li>定义变量，核心就是增加了块级作用域</li></ul></li><li>const<ul><li>也是块级作用域，它的作用是定义常量，一旦定义不可改变</li></ul></li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>let 和 const</li><li>模板字符串的使用</li><li>解构赋值<ul><li>数组的解构赋值</li><li>对象</li><li>函数参数也支持解构赋值</li></ul></li><li>函数的扩展<ul><li>参数默认值，只有尾参数才可以省略<ul><li>如果一个函数有多个参数，而只有其中一个有默认值可以省略，则把这个参数定义成尾参数</li></ul></li><li>函数参数的 rest 参数<ul><li>获取剩余参数</li><li>代替了 arguments</li><li>而且默认是真正的数组</li></ul></li><li>箭头函数<ul><li>语法</li><li>this 指向问题</li><li>不能乱用，要分请求它内部的 this</li><li>因为箭头函数中默认自动 <code>bind(this)</code></li><li>所以箭头函数是无法通过手动 call、apply、bind 来修改其内部 this 指向的</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink&quot; title=&quot;知识点&quot;&gt;&lt;/a&gt;知识点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Vue 基础&lt;ul&gt;
&lt;li&gt;转变 DOM 操作思想&lt;/li&gt;
&lt;li&gt;MVVM&lt;ul&gt;
&lt;li&gt;Model&lt;/li&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue.js 01</title>
    <link href="http://yoursite.com/2017/11/27/Vue.js-01/"/>
    <id>http://yoursite.com/2017/11/27/Vue.js-01/</id>
    <published>2017-11-27T09:04:31.414Z</published>
    <updated>2017-11-27T09:25:23.074Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/vuelogo.png" alt=""></p><h2 id="单页面应用程序"><a href="#单页面应用程序" class="headerlink" title="单页面应用程序"></a>单页面应用程序</h2><ul><li>Single Page Application（SPA）</li></ul><ul><li>Single Page Application（SPA）</li><li>从字面意义来看就是一个网站就一个页面<ul><li>coding</li><li>网易云音乐</li><li>极致用户体验，就像 native app 一样。</li></ul></li></ul><ul><li><p>优点</p><ul><li><p>分离前后端关注点，前端负责界面显示，后端负责数据存储和计算，各司其职，不会把前后端的逻辑混杂在一起</p></li><li><p>1、具有桌面应用的即时性、网站的可移植性和可访问性。<br>2、用户体验好、快，内容的改变不需要重新加载整个页面，web应用更具响应性和更令人着迷。<br>3、基于上面一点，SPA相对对服务器压力小。<br>4、良好的前后端分离。SPA和RESTful架构一起使用，后端不再负责模板渲染、输出页面工作，web前端和各种移动终端地位对等，后端API通用化。<br>5、对前端人员javascript技能要求更高，促使团队技能提升。作者：洞妖洞妖我系洞两链接：<a href="https://www.zhihu.com/question/20792064/answer/37808081" target="_blank" rel="noopener">https://www.zhihu.com/question/20792064/answer/37808081</a></p></li></ul></li></ul><ul><li>缺点<ul><li>致命缺点：SEO 问题，搜索引擎优化</li><li>目前也有一些对应的解决方案：但是都不够完美</li><li>1、不利于SEO。<br>2、初次加载耗时相对增多。<br>3、导航不可用，如果一定要导航需要自行实现前进、后退。<br>4、对开发人员技能水平、开发成本高。</li></ul></li></ul><h3 id="简单模拟单页面应用程序的效果"><a href="#简单模拟单页面应用程序的效果" class="headerlink" title="简单模拟单页面应用程序的效果"></a>简单模拟单页面应用程序的效果</h3><ul><li><code>hash</code></li><li><code>window.onhashchange</code> 事件</li><li>当 hash 改变的时候，根据不同的 hash 做不同处理</li></ul><h3 id="主流前端-JavaScript-框架"><a href="#主流前端-JavaScript-框架" class="headerlink" title="主流前端 JavaScript 框架"></a>主流前端 JavaScript 框架</h3><ul><li>Angular<ul><li>09年 原来是个人开发的，后来被 Google 给收购了</li></ul></li><li>React<ul><li>诞生于 Facebook 公司内部</li></ul></li><li>Vue.js<ul><li>尤雨溪（中国江苏无锡人，12 年左右）</li></ul></li></ul><h2 id="Vue-js-介绍"><a href="#Vue-js-介绍" class="headerlink" title="Vue.js 介绍"></a>Vue.js 介绍</h2><ul><li>是什么<ul><li>前端 JavaScript 框架</li></ul></li><li>为什么用它<ul><li>它能帮助提升网站应用程序开发效率</li></ul></li><li><p>一般什么情况下使用它</p><ul><li>一般是需要开发 SPA 应用程序的时候去用</li><li><p>但是 Vue 是渐进式的，Vue 其实可以融入到不同的项目中</p><p>可以和传统的网站开发架构融合在一起，例如可以简单的把它当作一个类似 jQUery 的库来使用</p><p>也可以使用它开发大型的 SPA 单页面应用程序</p></li></ul></li><li><p>发展历史</p><ul><li><p>作者：尤雨溪（微博：尤小右）。</p><p><a href="http://evanyou.me/" target="_blank" rel="noopener">个人网站</a>        <a href="https://www.zhihu.com/people/evanyou/activities" target="_blank" rel="noopener">知乎</a>    <a href="http://weibo.com/arttechdesign" target="_blank" rel="noopener">新浪微博</a></p><ul><li><p>作者尤雨溪最初在 2013 年 12 月 8号在 GitHub 上发布了 0.6 版</p><ul><li><p>2015 年 10 月份正式发布了 1.0 版本</p><p>Vue 真正的火起来就是在 15 年的 1.0 版发布之后才简陋头角</p></li><li>2016 年 10 月份正式发布了 2.0 版</li><li>截止到 2017-11-9 16:24:15 最新版是 2.5.3</li></ul></li></ul></li></ul></li></ul><ul><li>相关资源<ul><li><a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">Github</a></li><li><a href="http://vuejs.org/" target="_blank" rel="noopener">英文官网</a></li><li><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">中文官网</a></li><li><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">官方教程</a></li><li><a href="https://cn.vuejs.org/v2/api/" target="_blank" rel="noopener">API 参考文档</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../images/vuelogo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;单页面应用程序&quot;&gt;&lt;a href=&quot;#单页面应用程序&quot; class=&quot;headerlink&quot; title=&quot;单页面应用程序&quot;&gt;&lt;/a&gt;单页面应用程序&lt;/h2&gt;&lt;ul&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>之前被我玩坏了，现在完美复活^_^</title>
    <link href="http://yoursite.com/2017/11/26/%E5%AE%8C%E7%BE%8E%E5%A4%8D%E6%B4%BB/"/>
    <id>http://yoursite.com/2017/11/26/完美复活/</id>
    <published>2017-11-25T16:32:42.323Z</published>
    <updated>2017-11-25T16:39:08.399Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>哪些属性可以隐藏DOM元素？</title>
    <link href="http://yoursite.com/2017/11/25/%E5%93%AA%E4%BA%9B%E5%B1%9E%E6%80%A7%E5%8F%AF%E4%BB%A5%E4%BD%BFDOM%E5%85%83%E7%B4%A0%E9%9A%90%E8%97%8F/"/>
    <id>http://yoursite.com/2017/11/25/哪些属性可以使DOM元素隐藏/</id>
    <published>2017-11-25T15:30:16.854Z</published>
    <updated>2017-10-29T13:46:17.227Z</updated>
    
    <content type="html"><![CDATA[<h5 id="CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？"><a href="#CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？" class="headerlink" title="CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？"></a>CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？</h5><h6 id="方法一"><a href="#方法一" class="headerlink" title="方法一:"></a>方法一:</h6><p>设置display属性为none；</p><h6 id="方法二"><a href="#方法二" class="headerlink" title="方法二:"></a>方法二:</h6><p>设置visibility属性为hidden，不过元素本身还占位置；</p><h6 id="方法三"><a href="#方法三" class="headerlink" title="方法三:"></a>方法三:</h6><p>设置元素宽高为0；</p><h6 id="方法四"><a href="#方法四" class="headerlink" title="方法四:"></a>方法四:</h6><p>设置透明度为0，不过元素本身还占位置；</p><h6 id="方法五"><a href="#方法五" class="headerlink" title="方法五:"></a>方法五:</h6><p>设置z-index为负数，等。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？&quot;&gt;&lt;a href=&quot;#CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？&quot; class=&quot;headerlink&quot; title=&quot;CSS中可以通过哪些属性定义，使得一
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Node.js 更新了你还在等什么呢</title>
    <link href="http://yoursite.com/2017/11/25/nodejs%E6%9B%B4%E6%96%B0%E4%BA%86/"/>
    <id>http://yoursite.com/2017/11/25/nodejs更新了/</id>
    <published>2017-11-25T15:30:16.853Z</published>
    <updated>2017-11-02T15:19:23.215Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/nodejs.png" alt="实图"></p><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">点击前往下载地址</a></p><ul><li>尴尬的是下载的人太多，服务器承受不了。</li><li>15.9MB 下载了一个小时还没完。。。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../images/nodejs.png&quot; alt=&quot;实图&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击前往下载地址&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iscroll.js 用法介绍</title>
    <link href="http://yoursite.com/2017/11/25/iscroll.js/"/>
    <id>http://yoursite.com/2017/11/25/iscroll.js/</id>
    <published>2017-11-25T15:30:16.841Z</published>
    <updated>2017-10-30T14:04:44.657Z</updated>
    
    <content type="html"><![CDATA[<h4 id="iscroll-js主要是一款屏幕滚动常用到的框架，其又分为五个小的插件。"><a href="#iscroll-js主要是一款屏幕滚动常用到的框架，其又分为五个小的插件。" class="headerlink" title="iscroll.js主要是一款屏幕滚动常用到的框架，其又分为五个小的插件。"></a><a href="http://iscrolljs.com/" target="_blank" rel="noopener">iscroll.js</a>主要是一款屏幕滚动常用到的框架，其又分为五个小的插件。</h4><h6 id="1-isscroll-js"><a href="#1-isscroll-js" class="headerlink" title="(1)  isscroll.js"></a>(1)  isscroll.js</h6><p>它是通用脚本。包括最常用的功能，并在小占用带宽的同时提供非常高的性能。</p><h6 id="2-iscroll-lite-js"><a href="#2-iscroll-lite-js" class="headerlink" title="(2) iscroll-lite.js"></a>(2) iscroll-lite.js</h6><p>它是主要脚本的精简版本。适合于移动端设备。</p><h6 id="3-iscroll-probe-js"><a href="#3-iscroll-probe-js" class="headerlink" title="(3) iscroll-probe.js"></a>(3) iscroll-probe.js</h6><p>探测当前的滚动位置，正在测试阶段。</p><h6 id="4-iscroll-zoom-js"><a href="#4-iscroll-zoom-js" class="headerlink" title="(4) iscroll-zoom.js"></a>(4) iscroll-zoom.js</h6><p>添加缩放到标准滚动。</p><h6 id="5-iscroll-infinite-js"><a href="#5-iscroll-infinite-js" class="headerlink" title="(5) iscroll-infinite.js"></a>(5) iscroll-infinite.js</h6><p>可以无限次和缓存滚动，处理非常长的元素列表，不适用移动端。</p><h5 id="构建页面和导入iscroll-js"><a href="#构建页面和导入iscroll-js" class="headerlink" title="构建页面和导入iscroll.js:"></a>构建页面和导入iscroll.js:</h5><p>第一步:构建html页面</p><p><code>&lt;div id=&quot;wrapper&quot;&gt;&lt;ul&gt;&lt;li&gt;...&lt;/li&gt;&lt;li&gt;...&lt;/li&gt;...&lt;/ul&gt;&lt;/div&gt;</code></p><p>第二步:启用js脚本</p><p><code>&lt;script type=&quot;text/javascript&quot;&gt;var wrapper = document.getElementById(&#39;wrapper&#39;);var myScroll = new IScroll(wrapper);</code></p><p>第三步:引入js文件</p><p><code>&lt;script type=&quot;text/javascript&quot; src=&quot;iscroll.js&quot;&gt;&lt;/script&gt;</code></p><p>第四步:现在我们基本的功能就实现了，如果有什么需要可以查看其API进行修改，api修改代码在第二步的基础上修改</p><p><code>var myScroll = new IScroll(wrapper,{//在这里面写修改的代码});</code></p><p>​                                                                                                                API请自行查找<a href="http://iscrolljs.com/" target="_blank" rel="noopener">scroll.js官网</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;iscroll-js主要是一款屏幕滚动常用到的框架，其又分为五个小的插件。&quot;&gt;&lt;a href=&quot;#iscroll-js主要是一款屏幕滚动常用到的框架，其又分为五个小的插件。&quot; class=&quot;headerlink&quot; title=&quot;iscroll.js主要是一款屏幕滚
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>fastclick.js 介绍及用法</title>
    <link href="http://yoursite.com/2017/11/25/fastclick.js/"/>
    <id>http://yoursite.com/2017/11/25/fastclick.js/</id>
    <published>2017-11-25T15:30:16.839Z</published>
    <updated>2017-10-31T14:04:29.922Z</updated>
    
    <content type="html"><![CDATA[<p><em>注意;截至2015年底，大多数移动浏览器 - 特别是Chrome和Safari - 不再具有300ms触摸延迟，因此fastclick.js对新浏览器没有任何益处，并且会将错误引入到应用程序中。仔细考虑你是否真的需要使用它。</em></p><h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><h6 id="第一步：引入fastclick-js脚本"><a href="#第一步：引入fastclick-js脚本" class="headerlink" title="第一步：引入fastclick.js脚本"></a>第一步：引入fastclick.js脚本</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script  src=<span class="string">'./fastclick.js'</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h6 id="第二步：初始化脚本"><a href="#第二步：初始化脚本" class="headerlink" title="第二步：初始化脚本"></a>第二步：初始化脚本</h6><p>纯js代码时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">'addEventListener'</span> <span class="keyword">in</span> <span class="built_in">document</span>) &#123;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">FastClick.attach(<span class="built_in">document</span>.body);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有jQuery时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  FastClick.attach(<span class="built_in">document</span>.body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>又或者你正在使用Browserify或其他CommonJS风格的模块系统时：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> attachFastClick = <span class="built_in">require</span>(<span class="string">'fastclick'</span>);</span><br><span class="line">attachFastClick(<span class="built_in">document</span>.body);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/ftlabs/fastclick" target="_blank" rel="noopener">点击去fastclick.js源代码地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;注意;截至2015年底，大多数移动浏览器 - 特别是Chrome和Safari - 不再具有300ms触摸延迟，因此fastclick.js对新浏览器没有任何益处，并且会将错误引入到应用程序中。仔细考虑你是否真的需要使用它。&lt;/em&gt;&lt;/p&gt;
&lt;h5 id=&quot;用法&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>下载提速方法</title>
    <link href="http://yoursite.com/2017/11/25/%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6/"/>
    <id>http://yoursite.com/2017/11/25/下载速度/</id>
    <published>2017-11-25T15:30:16.838Z</published>
    <updated>2017-11-02T15:45:28.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="把下载地址直接复制下来，粘贴到迅雷下载地址，会自动解析出来下载地址，速度不慢哦"><a href="#把下载地址直接复制下来，粘贴到迅雷下载地址，会自动解析出来下载地址，速度不慢哦" class="headerlink" title="把下载地址直接复制下来，粘贴到迅雷下载地址，会自动解析出来下载地址，速度不慢哦"></a>把下载地址直接复制下来，粘贴到迅雷下载地址，会自动解析出来下载地址，速度不慢哦</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;把下载地址直接复制下来，粘贴到迅雷下载地址，会自动解析出来下载地址，速度不慢哦&quot;&gt;&lt;a href=&quot;#把下载地址直接复制下来，粘贴到迅雷下载地址，会自动解析出来下载地址，速度不慢哦&quot; class=&quot;headerlink&quot; title=&quot;把下载地址直接复制下来，粘贴
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何垂直居中一个元素和图片</title>
    <link href="http://yoursite.com/2017/11/25/%E5%A6%82%E4%BD%95%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%B5%AE%E5%8A%A8%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2017/11/25/如何垂直居中一个浮动元素/</id>
    <published>2017-11-25T15:30:16.810Z</published>
    <updated>2017-10-27T13:55:56.520Z</updated>
    
    <content type="html"><![CDATA[<h5 id="如垂直居中一个元素"><a href="#如垂直居中一个元素" class="headerlink" title="如垂直居中一个元素"></a>如垂直居中一个元素</h5><h6 id="方法一-已知元素的高宽"><a href="#方法一-已知元素的高宽" class="headerlink" title="方法一:已知元素的高宽"></a>方法一:已知元素的高宽</h6><p>$$<br>选择器{<br>    background-color: red;<br>    width:200px;<br>    height:200px;<br>    position: absolute;        //父元素需要相对定位<br>    top: 50%;<br>    left: 50%;<br>    margin-top:-100px ;   //二分之一的height，width<br>    margin-left: -100px;<br>    }<br>$$</p><h6 id="方法二-未知元素的高宽"><a href="#方法二-未知元素的高宽" class="headerlink" title="方法二:未知元素的高宽"></a>方法二:未知元素的高宽</h6><p>$$<br> 选择器{<br>    width: 200px;<br>    height: 200px;<br>    background-color: red;<br>    margin:auto;<br>    position: absolute;        //父元素需要相对定位<br>    left: 0;<br>    top: 0;<br>    right: 0;<br>    bottom: 0;<br>    }<br>$$</p><h5 id="如果是垂直居中一张图片"><a href="#如果是垂直居中一张图片" class="headerlink" title="如果是垂直居中一张图片"></a>如果是垂直居中一张图片</h5><p>$$<br>选择器     //<img>的容器设置如下<br>{<br>    display:table-cell;<br>    text-align:center;<br>    vertical-align:middle;<br>}<br>$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;如垂直居中一个元素&quot;&gt;&lt;a href=&quot;#如垂直居中一个元素&quot; class=&quot;headerlink&quot; title=&quot;如垂直居中一个元素&quot;&gt;&lt;/a&gt;如垂直居中一个元素&lt;/h5&gt;&lt;h6 id=&quot;方法一-已知元素的高宽&quot;&gt;&lt;a href=&quot;#方法一-已知元素的高宽&quot; c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/11/25/hello-world/"/>
    <id>http://yoursite.com/2017/11/25/hello-world/</id>
    <published>2017-11-25T15:01:07.082Z</published>
    <updated>2017-11-25T15:01:07.082Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
